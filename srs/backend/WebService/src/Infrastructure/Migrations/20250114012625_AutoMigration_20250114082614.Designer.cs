// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250114012625_AutoMigration_20250114082614")]
    partial class AutoMigration_20250114082614
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<long>("AccId")
                        .HasColumnType("bigint")
                        .HasColumnName("accID");

                    b.Property<long>("AccStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("accStatusID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("'255'::character varying");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("AccId")
                        .HasName("Account_pkey");

                    b.HasIndex("AccStatusId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "account_username_unique")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountStatus", b =>
                {
                    b.Property<long>("AccStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("accStatusID");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("statusName");

                    b.HasKey("AccStatusId")
                        .HasName("AccountStatus_pkey");

                    b.ToTable("AccountStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("addressID");

                    b.Property<string>("AddDetail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("addDetail");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("district");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ward");

                    b.HasKey("AddressId")
                        .HasName("Address_pkey");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<long>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brandID");

                    b.Property<string>("BrandDesc")
                        .HasColumnType("text")
                        .HasColumnName("brandDesc");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("brandName");

                    b.Property<string>("BrandOrigin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("brandOrigin");

                    b.Property<bool>("BrandStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("brandStatus");

                    b.HasKey("BrandId")
                        .HasName("Brand_pkey");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryProduct", b =>
                {
                    b.Property<long>("CateProdId")
                        .HasColumnType("bigint")
                        .HasColumnName("cateProdID");

                    b.Property<string>("CateProdName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cateProdName");

                    b.Property<bool>("CateProdStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("cateProdStatus");

                    b.HasKey("CateProdId")
                        .HasName("CategoryProduct_pkey");

                    b.ToTable("CategoryProduct", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("commentID");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commentContent");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<long>("ProdId")
                        .HasColumnType("bigint")
                        .HasColumnName("prodID");

                    b.Property<long>("UpdateAd")
                        .HasColumnType("bigint")
                        .HasColumnName("updateAd");

                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.HasKey("CommentId")
                        .HasName("Comment_pkey");

                    b.HasIndex("ProdId");

                    b.HasIndex("UsrId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeliveryDetail", b =>
                {
                    b.Property<long>("DeliId")
                        .HasColumnType("bigint")
                        .HasColumnName("deliID");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("addressID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<long>("DeliServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("deliServiceID");

                    b.Property<bool>("DeliStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("deliStatus")
                        .HasComment("Just manage 2 status: Success / False");

                    b.Property<long>("OrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordID");

                    b.HasKey("DeliId")
                        .HasName("DeliveryDetail_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeliServiceId");

                    b.HasIndex("OrdId");

                    b.ToTable("DeliveryDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DeliveryService", b =>
                {
                    b.Property<long>("DeliServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("DeliServiceID");

                    b.Property<string>("ContactService")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contactService");

                    b.Property<string>("DeliServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("DeliServiceStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("deliServiceStatus");

                    b.HasKey("DeliServiceId")
                        .HasName("DeliveryService_pkey");

                    b.ToTable("DeliveryService", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventID");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("discountPercent");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("endTime");

                    b.Property<string>("EventDesc")
                        .HasColumnType("text")
                        .HasColumnName("eventDesc");

                    b.Property<long>("EventName")
                        .HasColumnType("bigint")
                        .HasColumnName("eventName");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("startTime");

                    b.HasKey("EventId")
                        .HasName("Event_pkey");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EventDetail", b =>
                {
                    b.Property<long>("EventDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventDetailID");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventID");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productID");

                    b.HasKey("EventDetailId")
                        .HasName("EventDetail_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("ProductId");

                    b.ToTable("EventDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<long>("OrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventID");

                    b.Property<DateTime>("OrdDate")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("ordDate");

                    b.Property<long>("OrdStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordStatusID");

                    b.Property<double>("TotalOrdPricr")
                        .HasColumnType("double precision")
                        .HasColumnName("totalOrdPricr");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updateAt");

                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.HasKey("OrdId")
                        .HasName("Order_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("OrdStatusId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<long>("OrdDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordDetailID");

                    b.Property<long>("OrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordID");

                    b.Property<long>("ProdId")
                        .HasColumnType("bigint")
                        .HasColumnName("prodID");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.Property<double>("SellPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("sellPrice");

                    b.HasKey("OrdDetailId")
                        .HasName("OrderDetail_pkey");

                    b.HasIndex("OrdId");

                    b.HasIndex("ProdId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderLog", b =>
                {
                    b.Property<long>("OrdLogId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordLogID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<long>("NewStatusOrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("newStatusOrdID");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<long>("OrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordID");

                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.HasKey("OrdLogId")
                        .HasName("OrderLog_pkey");

                    b.HasIndex("NewStatusOrdId");

                    b.HasIndex("OrdId");

                    b.HasIndex("UsrId");

                    b.ToTable("OrderLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.Property<long>("OrdStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordStatusID");

                    b.Property<string>("OrdStatusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ordStatusName");

                    b.HasKey("OrdStatusId")
                        .HasName("OrderStatus_pkey");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productID");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brandID");

                    b.Property<long>("CateId")
                        .HasColumnType("bigint")
                        .HasColumnName("cateID");

                    b.Property<double>("CostPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("costPrice");

                    b.Property<string>("ProductDesc")
                        .HasColumnType("text")
                        .HasColumnName("productDesc");

                    b.Property<string>("ProductImgUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("productImgUrl")
                        .HasDefaultValueSql("'Array'::character varying")
                        .HasComment("Array Varchar");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("productName");

                    b.Property<double>("SellPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("sellPrice");

                    b.Property<long>("SkinTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skinTypeID");

                    b.Property<int>("Stocks")
                        .HasColumnType("integer")
                        .HasColumnName("stocks");

                    b.Property<double?>("TotalRating")
                        .HasColumnType("double precision")
                        .HasColumnName("totalRating");

                    b.Property<string>("UseFor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("useFor")
                        .HasComment("Suitable for skin type...");

                    b.HasKey("ProductId")
                        .HasName("Product_pkey");

                    b.HasIndex("BrandId");

                    b.HasIndex("CateId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("questionID");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionContent");

                    b.Property<long>("SkinTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skinTypeID");

                    b.HasKey("QuestionId")
                        .HasName("Question_pkey");

                    b.HasIndex("SkinTypeId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RatingProduct", b =>
                {
                    b.Property<long>("RatingProdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ratingProdID");

                    b.Property<long>("ProdId")
                        .HasColumnType("bigint")
                        .HasColumnName("prodID");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.HasKey("RatingProdId")
                        .HasName("RatingProduct_pkey");

                    b.HasIndex("ProdId");

                    b.HasIndex("UsrId");

                    b.ToTable("RatingProduct", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ResultSkinTest", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint")
                        .HasColumnName("resultID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<long>("SkinTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skinTypeID");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("testID");

                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.HasKey("ResultId")
                        .HasName("ResultSkinTest_pkey");

                    b.HasIndex("SkinTypeId");

                    b.HasIndex("TestId");

                    b.HasIndex("UsrId");

                    b.ToTable("ResultSkinTest", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("roleName");

                    b.Property<bool>("RoleStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("roleStatus");

                    b.HasKey("RoleId")
                        .HasName("Role_pkey");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SkinCondition", b =>
                {
                    b.Property<long>("SkinCondId")
                        .HasColumnType("bigint")
                        .HasColumnName("SkinCondID");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("condition");

                    b.Property<string>("ConditionDesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("conditionDesc");

                    b.HasKey("SkinCondId")
                        .HasName("SkinCondition_pkey");

                    b.ToTable("SkinCondition", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SkinType", b =>
                {
                    b.Property<long>("SkinTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skinTypeID");

                    b.Property<string>("SkinType1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("skinType");

                    b.Property<string>("SkinTypeDesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skinTypeDesc");

                    b.HasKey("SkinTypeId")
                        .HasName("SkinType_pkey");

                    b.ToTable("SkinType", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SkinTypeTest", b =>
                {
                    b.Property<long>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("testID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<long>("CreatedByUsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("createdByUsrID");

                    b.Property<long>("TestDesc")
                        .HasColumnType("bigint")
                        .HasColumnName("testDesc");

                    b.HasKey("TestId")
                        .HasName("SkinTypeTest_pkey");

                    b.HasIndex("CreatedByUsrId");

                    b.ToTable("SkinTypeTest", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SkinTypeTestDetail", b =>
                {
                    b.Property<long>("DetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("detailID");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("questionID");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("testID");

                    b.HasKey("DetailId")
                        .HasName("SkinTypeTestDetail_pkey");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("SkinTypeTestDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("addressID");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatarUrl");

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("coverUrl");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerifyToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("emailVerifyToken");

                    b.Property<string>("ForgotPasswordToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("forgotPasswordToken");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fullname");

                    b.Property<long?>("SkinCondId")
                        .HasColumnType("bigint")
                        .HasColumnName("skinCondID");

                    b.Property<long?>("SkinTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skinTypeID");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updateAt");

                    b.HasKey("UsrId")
                        .HasName("User_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("SkinCondId");

                    b.HasIndex("SkinTypeId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.Property<long>("VoucherId")
                        .HasColumnType("bigint")
                        .HasColumnName("voucherID");

                    b.Property<long>("UsrId")
                        .HasColumnType("bigint")
                        .HasColumnName("usrID");

                    b.Property<string>("VoucherDesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("voucherDesc");

                    b.Property<double>("VoucherDiscount")
                        .HasColumnType("double precision")
                        .HasColumnName("voucherDiscount");

                    b.HasKey("VoucherId")
                        .HasName("Voucher_pkey");

                    b.HasIndex("UsrId");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WarantyOrder", b =>
                {
                    b.Property<long>("WarantyId")
                        .HasColumnType("bigint")
                        .HasColumnName("warantyID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("createAt");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("endDate");

                    b.Property<long>("OrdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ordID");

                    b.HasKey("WarantyId")
                        .HasName("WarantyOrder_pkey");

                    b.HasIndex("OrdId");

                    b.ToTable("WarantyOrder", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.User", "Acc")
                        .WithOne("Account")
                        .HasForeignKey("Domain.Entities.Account", "AccId")
                        .IsRequired()
                        .HasConstraintName("account_accid_foreign");

                    b.HasOne("Domain.Entities.AccountStatus", "AccStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccStatusId")
                        .IsRequired()
                        .HasConstraintName("account_accstatusid_foreign");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("account_roleid_foreign");

                    b.Navigation("Acc");

                    b.Navigation("AccStatus");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Prod")
                        .WithMany("Comments")
                        .HasForeignKey("ProdId")
                        .IsRequired()
                        .HasConstraintName("comment_prodid_foreign");

                    b.HasOne("Domain.Entities.User", "Usr")
                        .WithMany("Comments")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("comment_usrid_foreign");

                    b.Navigation("Prod");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("Domain.Entities.DeliveryDetail", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("deliverydetail_addressid_foreign");

                    b.HasOne("Domain.Entities.DeliveryService", "DeliService")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("DeliServiceId")
                        .IsRequired()
                        .HasConstraintName("deliverydetail_deliserviceid_foreign");

                    b.HasOne("Domain.Entities.Order", "Ord")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("OrdId")
                        .IsRequired()
                        .HasConstraintName("deliverydetail_ordid_foreign");

                    b.Navigation("Address");

                    b.Navigation("DeliService");

                    b.Navigation("Ord");
                });

            modelBuilder.Entity("Domain.Entities.EventDetail", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("EventDetails")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("eventdetail_eventid_foreign");

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("EventDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("eventdetail_productid_foreign");

                    b.Navigation("Event");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("Orders")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("order_eventid_foreign");

                    b.HasOne("Domain.Entities.OrderStatus", "OrdStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrdStatusId")
                        .IsRequired()
                        .HasConstraintName("order_ordstatusid_foreign");

                    b.Navigation("Event");

                    b.Navigation("OrdStatus");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Ord")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrdId")
                        .IsRequired()
                        .HasConstraintName("orderdetail_ordid_foreign");

                    b.HasOne("Domain.Entities.Product", "Prod")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProdId")
                        .IsRequired()
                        .HasConstraintName("orderdetail_prodid_foreign");

                    b.Navigation("Ord");

                    b.Navigation("Prod");
                });

            modelBuilder.Entity("Domain.Entities.OrderLog", b =>
                {
                    b.HasOne("Domain.Entities.OrderStatus", "NewStatusOrd")
                        .WithMany("OrderLogs")
                        .HasForeignKey("NewStatusOrdId")
                        .IsRequired()
                        .HasConstraintName("orderlog_newstatusordid_foreign");

                    b.HasOne("Domain.Entities.Order", "Ord")
                        .WithMany("OrderLogs")
                        .HasForeignKey("OrdId")
                        .IsRequired()
                        .HasConstraintName("orderlog_ordid_foreign");

                    b.HasOne("Domain.Entities.User", "Usr")
                        .WithMany("OrderLogs")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("orderlog_usrid_foreign");

                    b.Navigation("NewStatusOrd");

                    b.Navigation("Ord");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("product_brandid_foreign");

                    b.HasOne("Domain.Entities.CategoryProduct", "Cate")
                        .WithMany("Products")
                        .HasForeignKey("CateId")
                        .IsRequired()
                        .HasConstraintName("product_cateid_foreign");

                    b.Navigation("Brand");

                    b.Navigation("Cate");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.SkinType", "SkinType")
                        .WithMany("Questions")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("question_skintypeid_foreign");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("Domain.Entities.RatingProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Prod")
                        .WithMany("RatingProducts")
                        .HasForeignKey("ProdId")
                        .IsRequired()
                        .HasConstraintName("ratingproduct_prodid_foreign");

                    b.HasOne("Domain.Entities.User", "Usr")
                        .WithMany("RatingProducts")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("ratingproduct_usrid_foreign");

                    b.Navigation("Prod");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("Domain.Entities.ResultSkinTest", b =>
                {
                    b.HasOne("Domain.Entities.SkinType", "SkinType")
                        .WithMany("ResultSkinTests")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("resultskintest_skintypeid_foreign");

                    b.HasOne("Domain.Entities.SkinTypeTest", "Test")
                        .WithMany("ResultSkinTests")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("resultskintest_testid_foreign");

                    b.HasOne("Domain.Entities.User", "Usr")
                        .WithMany("ResultSkinTests")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("resultskintest_usrid_foreign");

                    b.Navigation("SkinType");

                    b.Navigation("Test");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("Domain.Entities.SkinTypeTest", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUsr")
                        .WithMany("SkinTypeTests")
                        .HasForeignKey("CreatedByUsrId")
                        .IsRequired()
                        .HasConstraintName("skintypetest_createdbyusrid_foreign");

                    b.Navigation("CreatedByUsr");
                });

            modelBuilder.Entity("Domain.Entities.SkinTypeTestDetail", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("SkinTypeTestDetails")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("skintypetestdetail_questionid_foreign");

                    b.HasOne("Domain.Entities.SkinTypeTest", "Test")
                        .WithMany("SkinTypeTestDetails")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("skintypetestdetail_testid_foreign");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("user_addressid_foreign");

                    b.HasOne("Domain.Entities.SkinCondition", "SkinCond")
                        .WithMany("Users")
                        .HasForeignKey("SkinCondId")
                        .HasConstraintName("user_skincondid_foreign");

                    b.HasOne("Domain.Entities.SkinType", "SkinType")
                        .WithMany("Users")
                        .HasForeignKey("SkinTypeId")
                        .HasConstraintName("user_skintypeid_foreign");

                    b.Navigation("Address");

                    b.Navigation("SkinCond");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.HasOne("Domain.Entities.User", "Usr")
                        .WithMany("Vouchers")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("voucher_usrid_foreign");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("Domain.Entities.WarantyOrder", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Ord")
                        .WithMany("WarantyOrders")
                        .HasForeignKey("OrdId")
                        .IsRequired()
                        .HasConstraintName("warantyorder_ordid_foreign");

                    b.Navigation("Ord");
                });

            modelBuilder.Entity("Domain.Entities.AccountStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Navigation("DeliveryDetails");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.CategoryProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.DeliveryService", b =>
                {
                    b.Navigation("DeliveryDetails");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Navigation("EventDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("DeliveryDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderLogs");

                    b.Navigation("WarantyOrders");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("OrderLogs");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EventDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("RatingProducts");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("SkinTypeTestDetails");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.SkinCondition", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.SkinType", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("ResultSkinTests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.SkinTypeTest", b =>
                {
                    b.Navigation("ResultSkinTests");

                    b.Navigation("SkinTypeTestDetails");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Comments");

                    b.Navigation("OrderLogs");

                    b.Navigation("RatingProducts");

                    b.Navigation("ResultSkinTests");

                    b.Navigation("SkinTypeTests");

                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
